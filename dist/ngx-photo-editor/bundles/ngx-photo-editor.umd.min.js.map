{"version":3,"sources":["ng://ngx-photo-editor/lib/ngx-photo-editor.service.ts","ng://ngx-photo-editor/lib/ngx-photo-editor.component.ts","ng://ngx-photo-editor/lib/ngx-photo-editor.module.ts"],"names":["NgxPhotoEditorService","Injectable","args","providedIn","NgxPhotoEditorComponent","modalService","this","prevZoom","modalTitle","aspectRatio","autoCropArea","autoCrop","mask","guides","centerIndicator","viewMode","modalCentered","scalable","zoomable","cropBoxMovable","cropBoxResizable","darkTheme","roundCropper","canvasHeight","imageSmoothingEnabled","imageSmoothingQuality","lastUpdate","Date","now","format","quality","isFormatDefined","imageCropped","EventEmitter","Object","defineProperty","prototype","value","type","test","url","open","base64","imageUrl","split","event","_this","file","target","files","name","reader","FileReader","onload","ev","result","readAsDataURL","onImageLoad","image","addEventListener","document","getElementsByClassName","style","borderRadius","cropper","Cropper","modal","center","rotateRight","rotate","rotateLeft","crop","setDragMode","move","zoom","Number","zoomIn","zoomOut","flipH","scaleX","getImageData","flipV","scaleY","reset","export","cropedImage","resizeToWidth","resizeToHeight","getCroppedCanvas","width","height","outputImage","toDataURL","toBlob","blob","emit","File","content","size","modalSize","centered","backdrop","Component","selector","template","encapsulation","ViewEncapsulation","None","NgbModal","ViewChild","static","Input","Output","NgxPhotoEditorModule","NgModule","declarations","imports","NgbModalModule","exports"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxPhotoEditorService {\r\n\r\n  constructor() {\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport Cropper from 'cropperjs';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport ViewMode = Cropper.ViewMode;\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'ngx-photo-editor',\r\n  templateUrl: './ngx-photo-editor.component.html',\r\n  styleUrls: ['./ngx-photo-editor.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxPhotoEditorComponent {\r\n\r\n  @ViewChild('ngxPhotoEditorContent', {static: false}) content;\r\n\r\n  public cropper: Cropper;\r\n  public outputImage: string;\r\n  prevZoom = 0;\r\n\r\n  @Input() modalTitle = 'Photo Editor';\r\n  @Input() aspectRatio = 1;\r\n  @Input() autoCropArea = 1;\r\n  @Input() autoCrop = true;\r\n  @Input() mask = true;\r\n  @Input() guides = true;\r\n  @Input() centerIndicator = true;\r\n  @Input() viewMode: ViewMode = 0;\r\n  @Input() modalSize: size;\r\n  @Input() modalCentered = false;\r\n  @Input() scalable = true;\r\n  @Input() zoomable = true;\r\n  @Input() cropBoxMovable = true;\r\n  @Input() cropBoxResizable = true;\r\n  @Input() darkTheme = true;\r\n  @Input() roundCropper = false;\r\n  @Input() canvasHeight = 400;\r\n\r\n  @Input() resizeToWidth: number;\r\n  @Input() resizeToHeight: number;\r\n  @Input() imageSmoothingEnabled = true;\r\n  @Input() imageSmoothingQuality: ImageSmoothingQuality = 'high';\r\n  url: string;\r\n  lastUpdate = Date.now();\r\n\r\n  format = 'png';\r\n  quality = 92;\r\n\r\n  isFormatDefined = false;\r\n\r\n  @Output() imageCropped = new EventEmitter<CroppedEvent>();\r\n\r\n  constructor(private modalService: NgbModal) {\r\n  }\r\n\r\n  @Input() set imageQuality(value: number) {\r\n    if (value > 0 && value <= 100) {\r\n      this.quality = value;\r\n    }\r\n  }\r\n\r\n  @Input() set imageFormat(type: imageFormat) {\r\n    if ((/^(gif|jpe?g|tiff|png|webp|bmp)$/i).test(type)) {\r\n      this.format = type;\r\n      this.isFormatDefined = true;\r\n    }\r\n  }\r\n\r\n  @Input() set imageUrl(url: string) {\r\n    if (url) {\r\n      this.url = url;\r\n      if (this.lastUpdate !== Date.now()) {\r\n        this.open();\r\n        this.lastUpdate = Date.now();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageBase64(base64: string) {\r\n    if (base64 && (/^data:image\\/([a-zA-Z]*);base64,([^\\\"]*)$/).test(base64)) {\r\n      this.imageUrl = base64;\r\n      if (!this.isFormatDefined) {\r\n        this.format = ((base64.split(',')[0]).split(';')[0]).split(':')[1].split('/')[1];\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageChanedEvent(event: any) {\r\n    if (event) {\r\n      const file = event.target.files[0];\r\n      if (file && (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i).test(file.name)) {\r\n        if (!this.isFormatDefined) {\r\n          this.format = event.target.files[0].type.split('/')[1];\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onload = (ev: any) => {\r\n          this.imageUrl = ev.target.result;\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageFile(file: File) {\r\n    if (file && (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i).test(file.name)) {\r\n      if (!this.isFormatDefined) {\r\n        this.format = file.type.split('/')[1];\r\n      }\r\n      const reader = new FileReader();\r\n      reader.onload = (ev: any) => {\r\n        this.imageUrl = ev.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  onImageLoad(image) {\r\n\r\n    image.addEventListener('ready', () => {\r\n      if (this.roundCropper) {\r\n        (document.getElementsByClassName('cropper-view-box')[0] as HTMLElement).style.borderRadius = '50%';\r\n        (document.getElementsByClassName('cropper-face')[0] as HTMLElement).style.borderRadius = '50%';\r\n      }\r\n    });\r\n\r\n    this.cropper = new Cropper(image, {\r\n      aspectRatio: this.aspectRatio,\r\n      autoCropArea: this.autoCropArea,\r\n      autoCrop: this.autoCrop,\r\n      modal: this.mask, // black mask\r\n      guides: this.guides, // grid\r\n      center: this.centerIndicator, // center indicator\r\n      viewMode: this.viewMode,\r\n      scalable: this.scalable,\r\n      zoomable: this.zoomable,\r\n      cropBoxMovable: this.cropBoxMovable,\r\n      cropBoxResizable: this.cropBoxResizable,\r\n    });\r\n  }\r\n\r\n  rotateRight() {\r\n    this.cropper.rotate(45);\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.cropper.rotate(-45);\r\n  }\r\n\r\n  crop() {\r\n    this.cropper.setDragMode('crop');\r\n  }\r\n\r\n  move() {\r\n    this.cropper.setDragMode('move');\r\n  }\r\n\r\n  zoom(event) {\r\n    const value = Number(event.target.value);\r\n    this.cropper.zoom(value - this.prevZoom);\r\n    this.prevZoom = value;\r\n  }\r\n\r\n  zoomIn() {\r\n    this.cropper.zoom(0.1);\r\n  }\r\n\r\n  zoomOut() {\r\n    this.cropper.zoom(-0.1);\r\n  }\r\n\r\n  flipH() {\r\n    this.cropper.scaleX(-this.cropper.getImageData().scaleX);\r\n  }\r\n\r\n  flipV() {\r\n    this.cropper.scaleY(-this.cropper.getImageData().scaleY);\r\n  }\r\n\r\n  reset() {\r\n    this.cropper.reset();\r\n  }\r\n\r\n  export() {\r\n    let cropedImage;\r\n    if (this.resizeToWidth && this.resizeToHeight) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        width: this.resizeToWidth,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else if (this.resizeToHeight) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        height: this.resizeToHeight,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else if (this.resizeToWidth) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        width: this.resizeToWidth,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    }\r\n    this.outputImage = cropedImage.toDataURL('image/' + this.format, this.quality);\r\n    cropedImage.toBlob(blob => {\r\n      this.imageCropped.emit({\r\n        base64: this.outputImage,\r\n        file: new File([blob], Date.now() + '.' + this.format, {type: 'image/' + this.format})\r\n      });\r\n    }, 'image/' + this.format, this.quality / 100);\r\n  }\r\n\r\n  open() {\r\n    this.modalService.open(this.content, {size: this.modalSize, centered: this.modalCentered, backdrop: 'static'});\r\n  }\r\n}\r\n\r\nexport interface CroppedEvent {\r\n  base64?: string;\r\n  file?: File;\r\n}\r\n\r\nexport type imageFormat = 'gif' | 'jpeg' | 'tiff' | 'png' | 'webp' | 'bmp';\r\n\r\nexport type size = 'sm' | 'lg' | 'xl' | string;\r\n","import {NgModule} from '@angular/core';\r\nimport {NgxPhotoEditorComponent} from './ngx-photo-editor.component';\r\nimport {NgbModalModule} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@NgModule({\r\n  declarations: [NgxPhotoEditorComponent],\r\n  imports: [NgbModalModule],\r\n  exports: [NgxPhotoEditorComponent],\r\n})\r\nexport class NgxPhotoEditorModule {\r\n}\r\n"]}